import java.net.*;
import java.io.IOException;
import java.security.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Base64;
import java.util.StringTokenizer;



/**
 * The initial contact to the server is made over a UDP 
 * connection. Once the client's identity has been verified 
 * by the server using the client's secret key which is 
 * stored on both the server and the client, it will be able 
 * to close the UDP connection and create an encrypted TCP 
 * connection.
 */
class ClientUDPConnection {
    
    //Arguments passed in from Client.
    private String clientID;
    private String clientKey;	//Secret key.
    
    
    //Values provided by the server.
    protected int randNumber; 	//Sent by server in Challenge, used in calculating Client's response.
    protected String authfail = "authentication failed";
    protected String randCookie;	//Sent by server along with authSucc and TCPServerPort.
    //Used by Client later in TCP connection request.
    protected String encryptionKey;		//Client uses randCookie to generate the encryption key.
    protected boolean authSucc = false;
    
    //Used to establish a UDP connection to the server.
    private InetAddress serverIPAddress;
    private DatagramSocket clientUDPSocket;
    private byte[] sendBuffer = new byte[1024];
    private byte[] receiveBuffer = new byte[1024];
    
    //Server socket destination port number.
    private int UDPServerPort;
    protected int TCPServerPort;
    
    protected boolean timedout;
    
    
    /**
     * Constructor for ClientUDPConnection.
     * Parameters are provided by the Client instance.
     */
    protected ClientUDPConnection(String clientID, String clientKey, int serverPort) {
        this.clientID = clientID;
        this.clientKey = clientKey;
        this.UDPServerPort = 8756;
        timedout = false;
    }
     
    
    /**
     * Initiates the process for the client to be authenticated by
     * the server. Receives a random number generated by the server
     * (from the server's challenge) to be used in response() method.
     */
    protected void hello() throws IOException
    {
        try
        {
            
            //Create a new UDP client socket.
            clientUDPSocket = new DatagramSocket();
            
            //Pass client ID to send buffer.
            sendBuffer = (clientID).getBytes();
            
            //Retrieve destination server IP address.
            serverIPAddress = InetAddress.getByName("localhost");
            
	           
            
            //Send UDP packet to server to initiate connection.
            DatagramPacket sendPacket =
            new DatagramPacket(sendBuffer, sendBuffer.length, serverIPAddress, UDPServerPort);
            clientUDPSocket.send(sendPacket);
            
            
            System.out.println("waiting for challenge");
            
            //Wait for Challenge from server containing randNumber. Server
            //message should be an 4-digit integer number, eg. 1234.
            
            // Timeout to 1 minute
            clientUDPSocket.setSoTimeout(6000);
            
            //Create packet to extract message from the receive buffer.
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            
            
            
            //Receive packet from client socket.
            clientUDPSocket.receive(receivePacket);
            
            //Retrieve the client's message from the receive packet.
            String serverMsg = new String (receivePacket.getData()).trim();
            
            System.out.println("Server response: " + serverMsg); //Print server message.
            
            //Parse server message and fetch value of randCookie.
            randNumber = Integer.parseInt(serverMsg);
	           
            System.out.println("Client's randNumber: " + randNumber);
            
        }
        catch (SocketTimeoutException e)
        {
            System.out.println("Timeout from trying to connect to Server. Goodbye.");
            //close UDP socket
            clientUDPSocket.close();
            System.out.println("OFFLINE");
            timedout = true;
        }
    }
     
    
    /**
     * Calculates the client's response value and sends it as the
     * client's response to the server's challenge in order to
     * authenticate itself. Waits for authSuccess(randCookie,
     * TCPPortNumber) or authFail() response. If authSuccess, the
     * server's encryptionKey should be the same and the client's.
     */
    protected void response() throws IOException
    {
        try
        {
            //Calculate the Client's response using the rand sent by the server and the clientKey.
            
            System.out.println("clientKey: " + clientKey);
            
            
            //String sendMsg = clientKey + Hash.IDCheck(randNumber + clientKey);
            String sendMsg = clientID + "#" + Hash.IDCheck(randNumber + clientKey);
            System.out.println("client sendMsg: " + sendMsg);
            
            
            //Pass response message to send buffer.
            sendBuffer = sendMsg.getBytes();
            
            //Retrieve destination server IP address.
            serverIPAddress = InetAddress.getByName("localhost");
            
            // Timeout to 1 min
            clientUDPSocket.setSoTimeout(6000);
            
            //Send UDP packet to provide the client's response to the server's authentication challenge.
            DatagramPacket sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, serverIPAddress, UDPServerPort);
            clientUDPSocket.send(sendPacket);
            
            
            
            //*****Wait for response from server containing
            //a) authSuccess, randCookie, and TCPPortNumber, or
            //b) authFail.*****
            
            
            //Create packet to extract message from the receive buffer.
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            
            //Receive packet from client socket.
            clientUDPSocket.receive(receivePacket);
            
            //Retrieve the client's message from the receive packet.
            String serverMsg = new String (receivePacket.getData()).trim();
            
            System.out.println("AUTH_SUCC serverMsg before decryption: "+serverMsg);
            
            
            
            if(!serverMsg.equalsIgnoreCase(authfail))
            {
                encryptionKey= randNumber+clientKey;
                serverMsg = Crypt.decrypt(serverMsg,encryptionKey);
                
                
                //If the server's response isn't an AUTH_FAIL message,
                //the AUTH_SUCC message should have sent randCookie and TCPServerPort.
                System.out.println("AUTH_SUCC serverMsg: "+serverMsg);
                
                
                
                //Parse server message.
                StringTokenizer tokenizer = new StringTokenizer(serverMsg, ",");
                
                authSucc = true;
                
                //Parse randCookie.
                randCookie = tokenizer.nextToken();
                
                System.out.println("randCookie: " + randCookie); //Testing.
                
                //Parse TCPServerPort.
                TCPServerPort = Integer.parseInt((tokenizer.nextToken()).trim());
                
                System.out.println("TCPServerPort: " + TCPServerPort); //Testing.
            }
            else
            {
                //authFail
                System.out.println("Received AUTH_FAIL. Logging off.");
            }
            
            
        }
        catch(SocketTimeoutException o)
        {
            clientUDPSocket.close();
            System.out.println("Timeout from trying to get authorization from server.");
            System.out.println("OFFLINE");
            timedout = true;
        }
        finally
        {
            
            
            //*****Close UDP client socket, as future communication will be using TCP.******
            
            clientUDPSocket.close();
            System.out.println("UDP socket has been closed.");
            System.out.println();
        }
    }
    
    
    
}
